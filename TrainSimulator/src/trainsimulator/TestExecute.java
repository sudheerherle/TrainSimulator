/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TestExecute.java
 *
 * Created on Sep 1, 2017, 12:29:29 PM
 */
package trainsimulator;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import trainsimulator.common.SharedData;
import trainsimulator.fileutilities.ExtensionFileFilter;
import trainsimulator.tableutils.CTableHandler;
import trainsimulator.tableutils.HighlightRenderer;
import trainsimulator.tableutils.RXTable;

/**
 *
 * @author I14746
 */
public class TestExecute extends javax.swing.JFrame {
private DataFrame df = null;
private CTableHandler tabHandle;
ExcelToJtable excelToTable = null;
private boolean hold_update = false;
    /** Creates new form TestExecute */
    public TestExecute() {
        initComponents();
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        tabHandle =new CTableHandler(jTable1);
        jButton2.doClick();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new RXTable();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(trainsimulator.TrainSimulatorApp.class).getContext().getResourceMap(TestExecute.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "test case number 1", "", null, "Apply Reset", null, null},
                {null, null, "2", null, "A_B_A-B-", "1000", null},
                {null, null, "2", null, "B_A_B-A-", "1000", null},
                {null, null, "1", null, "A_B_A-B-", "1000", null},
                {null, null, "1", null, "C_D_C-D-", "1000", null},
                {null, null, "2", null, "A_B_A-B-", "1000", null},
                {null, null, "2", null, "C_D_C-D-", "1000", null}
            },
            new String [] {
                "Case Number", "Case Name", "Counts", "Speed", "Input", "Delay", "Remarks"
            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jTextField1.setEditable(false);
        jTextField1.setText(resourceMap.getString("jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.setName("jComboBox1"); // NOI18N
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jPanel1.setName("jPanel1"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 853, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 751, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    
//    if(TrainSimulatorApp.getApplication().getView().com_connect()==false){
//         jLabel2.setText("Train simulator hardware not found");
//        return;
//    }
    Thread te = new Thread(new Runnable() {
    public void run()
    {
        jButton1.setEnabled(false);
        int rows = jTable1.getRowCount();
        TestCase tc = new TestCase();
        jLabel2.setForeground(Color.BLUE);
        for(int row=0; row < rows; row++){
            
        jTable1.validate();
        String temp = (String) jTable1.getValueAt(row, 0);
        if(temp!=null && temp!=""){
        tc.case_no = Integer.valueOf(temp);
        }
        tc.case_name = (String) jTable1.getValueAt(row, 1);
        temp = (String) jTable1.getValueAt(row, 2);
        if(temp!=null && temp!=""){
            tc.counts = Integer.valueOf(temp);
        }
        if(tc.case_name==null){
            jLabel2.setText("Executing test case number "+tc.case_no+". Please wait...");
        }
        else jLabel2.setText("Executing test case number "+tc.case_no+" Case Name: " + tc.case_name+". Please wait...");
        temp = (String) jTable1.getValueAt(row, 3);
        if(temp!= null && temp !=""){
        tc.speed = Integer.valueOf(temp);
        }
        tc.input = (String) jTable1.getValueAt(row, 4);
        temp = (String) jTable1.getValueAt(row, 5);
        if(temp!= null && temp !=""){
        tc.delay = Integer.valueOf(temp);
        }
        if(tc.input.contains("_")|| tc.input.contains("-")){
                 if(TestCaseTask(tc)==false){
            break;
        }
        }else{
            JOptionPane.showMessageDialog(TestExecute.this, tc.input, "Action required",  JOptionPane.WARNING_MESSAGE);
        }            
              
        }
        jLabel2.setText("Test complete"); 
        jButton1.setEnabled(true);
    }
    });
    te.start();
    
}//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    String path = System.getProperty("user.home");
        final JFileChooser projectChooser = new JFileChooser(path);
        ExtensionFileFilter filter1 =  new ExtensionFileFilter("Microsoft Excel (XLS File)", new String[] {"XLS","XLSX"});
        projectChooser.setFileFilter (filter1);
        projectChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int status=projectChooser.showOpenDialog(null);
        if(status==JFileChooser.APPROVE_OPTION)
        {
            File selectedFile = projectChooser.getSelectedFile();
            jTextField1.setText(selectedFile.getAbsolutePath());
            excelToTable = new ExcelToJtable(selectedFile.getAbsolutePath());
            List sheets = excelToTable.getSheetNames();
            jComboBox1.removeAllItems();
            hold_update = true;
            for(int p =0 ; p<sheets.size(); p ++){
                jComboBox1.addItem((String) sheets.get(p));
            }
            hold_update = false;
            LoadTable(excelToTable.getSheetIndex((String)jComboBox1.getSelectedItem()));
        }
        else if(status==JFileChooser.CANCEL_OPTION){
            jLabel2.setText("No test case file selected");
        }
}//GEN-LAST:event_jButton2ActionPerformed

private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
    if(hold_update) return;
    String temp  = (String)jComboBox1.getSelectedItem();
    if(temp == null) return;
    int index = excelToTable.getSheetIndex(temp);
    LoadTable(index); 
}//GEN-LAST:event_jComboBox1ItemStateChanged

private boolean LoadTable(int sheetIndex){
    boolean retval = false;   
    tabHandle.removeAllRows();
    jTable1.repaint();
    jTable1.validate();
        try {
            List<String[]> list = excelToTable.readXLSXFile(sheetIndex);
            if(list.size()==0){                
                return false;
            }
            tabHandle.addColumns(list.get(0));
            for(int e = 1 ; e<list.size(); e ++)
            {
                tabHandle.addRows(list.get(e));
            }
            
        } catch (IOException ex1) {
            Logger.getLogger(TestExecute.class.getName()).log(Level.SEVERE, null, ex1);
        }
    return retval;
}
public boolean TestCaseTask(TestCase tc){
    boolean retval = false;
    System.out.println("Case name: "+tc.input);
    byte[] speed_result = new byte[4];
    String speed= "",speed1 = "",speed2 = "";
    df = new DataFrame();
    df.Command = new byte[]{0x3,0x0};
    df.Payload.auto_manual = 2;
    for(int d=0; d<tc.counts;d++){
    for(int s=0; s<tc.input.length(); s=s+2){               
            if(s%2==0){
               if(tc.input.contains("a") || tc.input.contains("A")
                       ||tc.input.contains("b") || tc.input.contains("B")){
                   if(df.Payload.configuration != (byte)0x1){
                       df = getNewFrame((byte)1);
                   }
               }else if(tc.input.contains("c") || tc.input.contains("C")
                       || tc.input.contains("d") || tc.input.contains("D")){
                   if(df.Payload.configuration != (byte)0x2){
                       df = getNewFrame((byte)2);
                   }
               }
               else if(tc.input.contains("e") || tc.input.contains("E")
                       || tc.input.contains("f") || tc.input.contains("F")){
                   if(df.Payload.configuration != (byte)0x3){
                       df = getNewFrame((byte)3);
                   }
               }
               else if(tc.input.contains("g") || tc.input.contains("G")
                       || tc.input.contains("h") || tc.input.contains("H")){
                   if(df.Payload.configuration != (byte)0x4){
                       df = getNewFrame((byte)4);
                   }
               }
               ByteBuffer b = ByteBuffer.allocate(4);
                //b.order(ByteOrder.BIG_ENDIAN); // optional, the initial order of a byte buffer is always BIG_ENDIAN.
               b.putInt(df.Payload.speed);

               speed_result = b.array();
               if(tc.input.charAt(s) == 'a' || tc.input.charAt(s) == 'A'){
                  speed_result[3] = getSpeed(tc,s);
               }
               if(tc.input.charAt(s) == 'b' || tc.input.charAt(s) == 'B'){
                  speed_result[2] = getSpeed(tc,s);
               }
               if(tc.input.charAt(s) == 'c' || tc.input.charAt(s) == 'C'){
                  speed_result[3] = getSpeed(tc,s);
               }
               if(tc.input.charAt(s) == 'd' || tc.input.charAt(s) == 'D'){
                  speed_result[2] = getSpeed(tc,s);
               }    
               
               if(tc.input.charAt(s) == 'e' || tc.input.charAt(s) == 'E'){
                  speed_result[3] = getSpeed(tc,s);
               }  
               if(tc.input.charAt(s) == 'f' || tc.input.charAt(s) == 'F'){
                  speed_result[2] = getSpeed(tc,s);
               }  
               if(tc.input.charAt(s) == 'g' || tc.input.charAt(s) == 'G'){
                  speed_result[3] = getSpeed(tc,s);
               }  
               if(tc.input.charAt(s) == 'h' || tc.input.charAt(s) == 'H'){
                  speed_result[2] = getSpeed(tc,s);
               }  
            }           
            df.Payload.speed = ByteBuffer.wrap(speed_result).getInt();
            retval =  TrainSimulatorApp.getApplication().getView().SendPacketRecieveResponse(df);
            if(!retval) break;
        }
    }
    return retval;
}
 
private DataFrame getNewFrame(byte b){
    DataFrame d = new DataFrame();
    d.Command = new byte[]{0x3,0x0};
    d.Payload.auto_manual = 2;
    d.Payload.configuration = b;
    return d;
}
private byte getSpeed(TestCase tx, int s){
    byte speed = 0x0;        
    if(tx.input.charAt(s+1) == '_'){
    speed = 0x1;
    }else{
        speed = 0x0;
    }
    return speed;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestExecute.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestExecute.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestExecute.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestExecute.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new TestExecute().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
