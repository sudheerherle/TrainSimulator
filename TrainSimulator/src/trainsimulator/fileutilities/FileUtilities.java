/* * Copyright (c) 1995 - 2008 Sun Microsystems, Inc. All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are met: *  - Redistributions of source code must retain the above copyright notice, * this list of conditions and the following disclaimer. *  - Redistributions in binary form must reproduce the above copyright notice, * this list of conditions and the following disclaimer in the documentation * and/or other materials provided with the distribution. *  - Neither the name of Sun Microsystems nor the names of its contributors may * be used to endorse or promote products derived from this software without * specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OtrainsimulatorLITY OF SUCH DAMAGE. */package com.microchip.ipe.fileutilities;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.ArrayList;import java.util.List;/** * This class assumes that the string used to initialize fullPath has a * directory path, filename, and extension. The methods won't work if it * doesn't. *//* Partha: Modified the name to FileUilities and added more functions to it. *          copy, splitFileNames, deleteDirectory */public class FileUtilities {  private String fullPath;  private char pathSeparator, extensionSeparator;  public FileUtilities(String str, char sep, char ext) {    fullPath = str;    pathSeparator = sep;    extensionSeparator = ext;  }  public String extension() {    int dot = fullPath.lastIndexOf(extensionSeparator);    return fullPath.substring(dot + 1);  }  public String fileName() { // gets filename without extension    int dot = fullPath.lastIndexOf(extensionSeparator);    int sep = fullPath.lastIndexOf(pathSeparator);    return fullPath.substring(sep + 1, dot);  }  public String path() {    int sep = fullPath.lastIndexOf(pathSeparator);    return fullPath.substring(0, sep);  }    // Copies src file to dst file.   // If the dst file does not exist, it is created    public static void copy(File src, File dst) throws IOException {            InputStream in = new FileInputStream(src);            OutputStream out = new FileOutputStream(dst);            // Transfer bytes from in to out            byte[] buf = new byte[1024];            int len;            while ((len = in.read(buf)) > 0) {                    out.write(buf, 0, len);            }            in.close();            out.close();    }    public static List splitFileNames(String sFileNames){      List lstFileName= new ArrayList();      int currentindex=-1;      int previousindex=-1;      String osName= System.getProperty("os.name");      do{          currentindex=sFileNames.indexOf("\n",previousindex+1);          if(currentindex!=-1){              Object stringobj=null;              if(osName.equalsIgnoreCase("linux")){                    stringobj= new String(sFileNames.substring(previousindex+1, currentindex));              }              else{                    stringobj= new String(sFileNames.substring(previousindex+1, currentindex-1));              }              if((currentindex-previousindex)<5){                  previousindex=currentindex;                  continue;              }              lstFileName.add(stringobj);              previousindex=currentindex;          }      }while(currentindex!=-1);       return lstFileName;    }    public static void copyDirectory(File sourceLocation , File targetLocation)    throws IOException {        if (sourceLocation.isDirectory()) {            if (!targetLocation.exists()) {                targetLocation.mkdir();            }            String[] children = sourceLocation.list();            for (int i=0; i<children.length; i++) {                copyDirectory(new File(sourceLocation, children[i]),                        new File(targetLocation, children[i]));            }        } else {            InputStream in = new FileInputStream(sourceLocation);            OutputStream out = new FileOutputStream(targetLocation);            // Copy the bits from instream to outstream            byte[] buf = new byte[1024];            int len;            while ((len = in.read(buf)) > 0) {                out.write(buf, 0, len);            }            in.close();            out.close();        }    }     static public boolean deleteDirectory(File path) {        if( path.exists() ) {          File[] files = path.listFiles();          for(int i=0; i<files.length; i++) {             if(files[i].isDirectory()) {               deleteDirectory(files[i]);             }             else {               files[i].delete();             }          }        }        return( path.delete() );      }     public static String getParentDirectory(String path, boolean isEnvPath)     {        char[] cpath = path.toCharArray();        char[] newPath = new char[100];        int j = 0;        for(int i = cpath.length - 1; i > 0; i--)        {            if(cpath[i] == '\\')            {                if(isEnvPath)                {                    j++;                    if(j == 2)                    {                        newPath = new char[i + 1];                        break;                    }                }                else                {                    newPath = new char[i + 1];                    break;                }            }        }        System.arraycopy(cpath, 0, newPath, 0, newPath.length);                return(String.copyValueOf(newPath));     }}