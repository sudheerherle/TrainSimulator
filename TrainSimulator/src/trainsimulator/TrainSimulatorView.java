/*
 * TrainSimulatorView.java
 */

package trainsimulator;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import trainsimulator.common.SharedData;

/**
 * The application's main frame.
 */
public class TrainSimulatorView extends FrameView {

    public SimulatorPanel[] simulatorPanels = new SimulatorPanel[4];
    private SerialHelper sh = new SerialHelper();
    private DataFrame DF_recieved;
    private static byte[] poll_port = new byte[]{0x1,0x0};
    private  TimerTask Blinker_Task ;
    private  TimerTask Counter_Task_FWD ;
    private  TimerTask Counter_Task_REV ;
    Timer timer_fwd = new Timer(); 
    Timer timer_rev = new Timer(); 
    Timer timer_test = new Timer(); 
    private  TestTask Test_Task ;
    
    SharedData sharedData = SharedData.getSingletonObject();
    private boolean time_out = false;
    private Timer timeout_timer = new Timer(); 
    Timer timer = new Timer(); 
          
    public TrainSimulatorView(SingleFrameApplication app) {
        super(app);

        initComponents();
        initialGUISettings();
        updatePanels();  
    }

     /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        SimulationPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        ModePanel = new javax.swing.JPanel();
        rBtnAutomatic = new javax.swing.JRadioButton();
        rBtnManual = new javax.swing.JRadioButton();
        DirectionPanel = new javax.swing.JPanel();
        rBtnForward = new javax.swing.JRadioButton();
        rBtnReverse = new javax.swing.JRadioButton();
        ConfigPanel = new javax.swing.JPanel();
        configCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        connection_indicator_panel = new javax.swing.JPanel();
        Counter_fwd = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        counter_rev = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        testSchedulerPanel = new javax.swing.JPanel();
        jLabel56 = new javax.swing.JLabel();
        schedulerspeed = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        schedulercount = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        randomrbtn = new javax.swing.JRadioButton();
        fixedrbtn = new javax.swing.JRadioButton();
        intervaltxtfield = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        trainCounts = new javax.swing.JTextField();
        BtnStart = new javax.swing.JButton();
        BtnStop = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        CommSettingMitem = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(trainsimulator.TrainSimulatorApp.class).getContext().getResourceMap(TrainSimulatorView.class);
        SimulationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("SimulationPanel.border.title"), 0, 0, resourceMap.getFont("SimulationPanel.border.titleFont"))); // NOI18N
        SimulationPanel.setName("SimulationPanel"); // NOI18N
        SimulationPanel.setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setName("jPanel1"); // NOI18N

        ModePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("ModePanel.border.title"), 0, 0, resourceMap.getFont("ConfigPanel.border.titleFont"))); // NOI18N
        ModePanel.setName("ModePanel"); // NOI18N

        rBtnAutomatic.setFont(resourceMap.getFont("rBtnReverse.font")); // NOI18N
        rBtnAutomatic.setSelected(true);
        rBtnAutomatic.setText(resourceMap.getString("rBtnAutomatic.text")); // NOI18N
        rBtnAutomatic.setName("rBtnAutomatic"); // NOI18N
        rBtnAutomatic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnAutomaticActionPerformed(evt);
            }
        });

        rBtnManual.setFont(resourceMap.getFont("rBtnReverse.font")); // NOI18N
        rBtnManual.setText(resourceMap.getString("rBtnManual.text")); // NOI18N
        rBtnManual.setName("rBtnManual"); // NOI18N
        rBtnManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnManualActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ModePanelLayout = new javax.swing.GroupLayout(ModePanel);
        ModePanel.setLayout(ModePanelLayout);
        ModePanelLayout.setHorizontalGroup(
            ModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ModePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rBtnAutomatic, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                    .addComponent(rBtnManual, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE))
                .addContainerGap())
        );
        ModePanelLayout.setVerticalGroup(
            ModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ModePanelLayout.createSequentialGroup()
                .addComponent(rBtnAutomatic)
                .addGap(18, 18, 18)
                .addComponent(rBtnManual)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        DirectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("DirectionPanel.border.title"), 0, 0, resourceMap.getFont("ConfigPanel.border.titleFont"))); // NOI18N
        DirectionPanel.setName("DirectionPanel"); // NOI18N

        rBtnForward.setFont(resourceMap.getFont("rBtnReverse.font")); // NOI18N
        rBtnForward.setSelected(true);
        rBtnForward.setText(resourceMap.getString("rBtnForward.text")); // NOI18N
        rBtnForward.setName("rBtnForward"); // NOI18N
        rBtnForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnForwardActionPerformed(evt);
            }
        });

        rBtnReverse.setFont(resourceMap.getFont("rBtnReverse.font")); // NOI18N
        rBtnReverse.setText(resourceMap.getString("rBtnReverse.text")); // NOI18N
        rBtnReverse.setName("rBtnReverse"); // NOI18N
        rBtnReverse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnReverseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DirectionPanelLayout = new javax.swing.GroupLayout(DirectionPanel);
        DirectionPanel.setLayout(DirectionPanelLayout);
        DirectionPanelLayout.setHorizontalGroup(
            DirectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DirectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DirectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rBtnForward, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                    .addComponent(rBtnReverse, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE))
                .addContainerGap())
        );
        DirectionPanelLayout.setVerticalGroup(
            DirectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DirectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rBtnForward, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(rBtnReverse, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        ConfigPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("ConfigPanel.border.title"), 0, 0, resourceMap.getFont("ConfigPanel.border.titleFont"))); // NOI18N
        ConfigPanel.setName("ConfigPanel"); // NOI18N

        configCombo.setFont(resourceMap.getFont("configCombo.font")); // NOI18N
        configCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DE", "2D1S", "3D1S", "3D2S", "3D3S", "4D1S", "TWS" }));
        configCombo.setName("configCombo"); // NOI18N
        configCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                configComboItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout ConfigPanelLayout = new javax.swing.GroupLayout(ConfigPanel);
        ConfigPanel.setLayout(ConfigPanelLayout);
        ConfigPanelLayout.setHorizontalGroup(
            ConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(configCombo, 0, 382, Short.MAX_VALUE)
                .addContainerGap())
        );
        ConfigPanelLayout.setVerticalGroup(
            ConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(configCombo, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(resourceMap.getIcon("jLabel1.icon")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ConfigPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                    .addComponent(ModePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DirectionPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ConfigPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DirectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ModePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setName("jPanel2"); // NOI18N

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        lblStatus.setFont(resourceMap.getFont("lblStatus.font")); // NOI18N
        lblStatus.setText(resourceMap.getString("lblStatus.text")); // NOI18N
        lblStatus.setName("lblStatus"); // NOI18N

        connection_indicator_panel.setName("connection_indicator_panel"); // NOI18N

        javax.swing.GroupLayout connection_indicator_panelLayout = new javax.swing.GroupLayout(connection_indicator_panel);
        connection_indicator_panel.setLayout(connection_indicator_panelLayout);
        connection_indicator_panelLayout.setHorizontalGroup(
            connection_indicator_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );
        connection_indicator_panelLayout.setVerticalGroup(
            connection_indicator_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(10, 10, 10)
                .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 1066, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(connection_indicator_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(connection_indicator_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel2, lblStatus});

        Counter_fwd.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("Counter_fwd.border.title"))); // NOI18N
        Counter_fwd.setName("Counter_fwd"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setForeground(resourceMap.getColor("jLabel3.foreground")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setForeground(resourceMap.getColor("jLabel6.foreground")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        javax.swing.GroupLayout Counter_fwdLayout = new javax.swing.GroupLayout(Counter_fwd);
        Counter_fwd.setLayout(Counter_fwdLayout);
        Counter_fwdLayout.setHorizontalGroup(
            Counter_fwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Counter_fwdLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Counter_fwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addGap(17, 17, 17)
                .addGroup(Counter_fwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE))
                .addContainerGap())
        );
        Counter_fwdLayout.setVerticalGroup(
            Counter_fwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Counter_fwdLayout.createSequentialGroup()
                .addGroup(Counter_fwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addGap(11, 11, 11)
                .addGroup(Counter_fwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)))
        );

        counter_rev.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("counter_rev.border.title"))); // NOI18N
        counter_rev.setName("counter_rev"); // NOI18N

        jLabel7.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
        jLabel7.setForeground(resourceMap.getColor("jLabel7.foreground")); // NOI18N
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        jLabel10.setForeground(resourceMap.getColor("jLabel6.foreground")); // NOI18N
        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        javax.swing.GroupLayout counter_revLayout = new javax.swing.GroupLayout(counter_rev);
        counter_rev.setLayout(counter_revLayout);
        counter_revLayout.setHorizontalGroup(
            counter_revLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(counter_revLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(counter_revLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8))
                .addGap(17, 17, 17)
                .addGroup(counter_revLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
                .addContainerGap())
        );
        counter_revLayout.setVerticalGroup(
            counter_revLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(counter_revLayout.createSequentialGroup()
                .addGroup(counter_revLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(counter_revLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10)))
        );

        testSchedulerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("testSchedulerPanel.border.title"))); // NOI18N
        testSchedulerPanel.setName("testSchedulerPanel"); // NOI18N

        jLabel56.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel56.setText(resourceMap.getString("jLabel56.text")); // NOI18N
        jLabel56.setName("jLabel56"); // NOI18N

        schedulerspeed.setText(resourceMap.getString("schedulerspeed.text")); // NOI18N
        schedulerspeed.setName("schedulerspeed"); // NOI18N

        jLabel57.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel57.setText(resourceMap.getString("jLabel57.text")); // NOI18N
        jLabel57.setName("jLabel57"); // NOI18N

        schedulercount.setText(resourceMap.getString("schedulercount.text")); // NOI18N
        schedulercount.setName("schedulercount"); // NOI18N

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel6.border.title"))); // NOI18N
        jPanel6.setName("jPanel6"); // NOI18N

        randomrbtn.setText(resourceMap.getString("randomrbtn.text")); // NOI18N
        randomrbtn.setName("randomrbtn"); // NOI18N

        fixedrbtn.setText(resourceMap.getString("fixedrbtn.text")); // NOI18N
        fixedrbtn.setName("fixedrbtn"); // NOI18N

        intervaltxtfield.setText(resourceMap.getString("intervaltxtfield.text")); // NOI18N
        intervaltxtfield.setName("intervaltxtfield"); // NOI18N

        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(randomrbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(fixedrbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(intervaltxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(randomrbtn)
                    .addComponent(fixedrbtn)
                    .addComponent(jLabel13)
                    .addComponent(intervaltxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel7.border.title"))); // NOI18N
        jPanel7.setName("jPanel7"); // NOI18N

        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        trainCounts.setText(resourceMap.getString("trainCounts.text")); // NOI18N
        trainCounts.setName("trainCounts"); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trainCounts, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(262, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(trainCounts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        BtnStart.setBackground(resourceMap.getColor("BtnStart.background")); // NOI18N
        BtnStart.setFont(resourceMap.getFont("BtnStart.font")); // NOI18N
        BtnStart.setText(resourceMap.getString("BtnStart.text")); // NOI18N
        BtnStart.setName("BtnStart"); // NOI18N
        BtnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnStartActionPerformed(evt);
            }
        });

        BtnStop.setBackground(resourceMap.getColor("BtnStop.background")); // NOI18N
        BtnStop.setFont(resourceMap.getFont("BtnStop.font")); // NOI18N
        BtnStop.setForeground(resourceMap.getColor("BtnStop.foreground")); // NOI18N
        BtnStop.setText(resourceMap.getString("BtnStop.text")); // NOI18N
        BtnStop.setName("BtnStop"); // NOI18N
        BtnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout testSchedulerPanelLayout = new javax.swing.GroupLayout(testSchedulerPanel);
        testSchedulerPanel.setLayout(testSchedulerPanelLayout);
        testSchedulerPanelLayout.setHorizontalGroup(
            testSchedulerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testSchedulerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(testSchedulerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(testSchedulerPanelLayout.createSequentialGroup()
                        .addGroup(testSchedulerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel57)
                            .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(testSchedulerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(testSchedulerPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(schedulerspeed, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, testSchedulerPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(schedulercount, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(44, 44, 44)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(testSchedulerPanelLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(BtnStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(127, Short.MAX_VALUE))
        );
        testSchedulerPanelLayout.setVerticalGroup(
            testSchedulerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testSchedulerPanelLayout.createSequentialGroup()
                .addGroup(testSchedulerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(testSchedulerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel57)
                        .addGroup(testSchedulerPanelLayout.createSequentialGroup()
                            .addGroup(testSchedulerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel56)
                                .addComponent(schedulerspeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(schedulercount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(testSchedulerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(testSchedulerPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(testSchedulerPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(testSchedulerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BtnStop)
                            .addComponent(BtnStart)))))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(testSchedulerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(Counter_fwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 147, Short.MAX_VALUE)
                                .addComponent(counter_rev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(SimulationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE))))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(SimulationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Counter_fwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(counter_rev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testSchedulerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 195, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Counter_fwd, counter_rev});

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(trainsimulator.TrainSimulatorApp.class).getContext().getActionMap(TrainSimulatorView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        CommSettingMitem.setText(resourceMap.getString("CommSettingMitem.text")); // NOI18N
        CommSettingMitem.setName("CommSettingMitem"); // NOI18N
        CommSettingMitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CommSettingMitemActionPerformed(evt);
            }
        });
        jMenu1.add(CommSettingMitem);

        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        menuBar.add(jMenu1);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem1);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        progressBar.setBackground(resourceMap.getColor("progressBar.background")); // NOI18N
        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 1180, Short.MAX_VALUE)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        TrainSimulatorAboutBox abbox = new TrainSimulatorAboutBox(null);
        abbox.setLocationRelativeTo(this.getFrame());
        abbox.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void CommSettingMitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CommSettingMitemActionPerformed
        communicationSetting cs = new communicationSetting(null, true);
        cs.setLocationRelativeTo(this.getFrame());
        cs.setVisible(true);
    }//GEN-LAST:event_CommSettingMitemActionPerformed

    private void rBtnManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnManualActionPerformed
        if(rBtnManual.isSelected()){
            configCombo.setEnabled(false);
            sharedData.AutoManual=2;
            testSchedulerPanel.setVisible(false);
        }
        updatePanels();
    }//GEN-LAST:event_rBtnManualActionPerformed

    private void configComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_configComboItemStateChanged
        updatePanels();
    }//GEN-LAST:event_configComboItemStateChanged

    private void rBtnAutomaticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnAutomaticActionPerformed
        if(rBtnAutomatic.isSelected()){
            configCombo.setEnabled(true);
            sharedData.AutoManual=1;
        }
        updatePanels();
    }//GEN-LAST:event_rBtnAutomaticActionPerformed

private void rBtnForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnForwardActionPerformed
        if(rBtnForward.isSelected()){
            sharedData.FwdRev=1;
        }
    
}//GEN-LAST:event_rBtnForwardActionPerformed

private void rBtnReverseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnReverseActionPerformed
        if(rBtnReverse.isSelected()){
            sharedData.FwdRev=2;
        }
}//GEN-LAST:event_rBtnReverseActionPerformed

private void BtnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnStartActionPerformed
    long interval = Long.valueOf(intervaltxtfield.getText()) * 60 * 1000;
    Test_Task = new TestTask(this);
    timer_test.scheduleAtFixedRate(Test_Task, 0, interval);    
    BtnStart.setEnabled(false);
}//GEN-LAST:event_BtnStartActionPerformed


private void BtnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnStopActionPerformed
        
    if(Test_Task!=null)
    Test_Task.cancel();
    controlAllButtons(true);
    BtnStart.setEnabled(true);
        
}//GEN-LAST:event_BtnStopActionPerformed

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    
        String readme= null;    
    try {
            readme = new File(TrainSimulatorView.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath()).getParentFile().getPath();
        } catch (URISyntaxException ex) {
            Logger.getLogger(TrainSimulatorView.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    if (Desktop.isDesktopSupported()) {
    try {
        if (Desktop.getDesktop().isSupported(Desktop.Action.EDIT)) {
            File file = new File(readme+"/Readme.txt");
            if(!file.isFile()){
                JOptionPane.showMessageDialog(TrainSimulatorApp.getApplication().getView().getFrame(), "Failed to open the readme file.","Error",  JOptionPane.ERROR_MESSAGE);
            }
            else Desktop.getDesktop().edit(file);
        }
//        // or...
//        if (Desktop.getDesktop().isSupported(Desktop.Action.OPEN)) {
//            Desktop.getDesktop().open(new File(readme+"/Readme.txt"));
//        }
    } catch (IOException exp) {
        exp.printStackTrace();
    }
}
    
}//GEN-LAST:event_jMenuItem1ActionPerformed

private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
    TestExecute te = new TestExecute();
    te.setLocationRelativeTo(this.getFrame());
    te.setVisible(true);
}//GEN-LAST:event_jMenuItem2ActionPerformed

   public void controlAllButtons(boolean b) {
        if(b==false){
            progressBar.setIndeterminate(true);
        }
        else{
           progressBar.setIndeterminate(false);
        }
        SimulationPanel.setEnabled(b);
        configCombo.setEnabled(b);
        DirectionPanel.setEnabled(b);
        ModePanel.setEnabled(b);
        testSchedulerPanel.setEnabled(b);
        rBtnAutomatic.setEnabled(b);
        rBtnManual.setEnabled(b);
        schedulercount.setEnabled(b);
        schedulerspeed.setEnabled(b);
        trainCounts.setEnabled(b);    
        rBtnForward.setEnabled(b);
        rBtnReverse.setEnabled(b);
        ConfigPanel.setEnabled(b);
        intervaltxtfield.setEnabled(b);
     }
    private byte[] getArrayFromPacket(DataFrame df){
        byte[] array_data  = new byte[22];
        System.arraycopy(df.SOF, 0, array_data, 0, 1);
        System.arraycopy(df.DestAddrs, 0, array_data, 1, 2);
        System.arraycopy(df.Command, 0, array_data, 3, 2);
        System.arraycopy(df.FrameNo, 0, array_data, 5, 2);
        System.arraycopy(df.Length, 0, array_data, 7, 2);
        array_data[9] = df.Payload.configuration;
        array_data[10] = df.Payload.auto_manual;
        array_data[11] = df.Payload.fwd_reverse;
        
        array_data[12] = (byte)((df.Payload.speed ) & 0xFF);
        array_data[13] = (byte)((df.Payload.speed >> 8) & 0xFF);
        array_data[14] = (byte)((df.Payload.speed >> 16) & 0xFF);
        array_data[15] = (byte)((df.Payload.speed >> 24) & 0xFF);
        
        array_data[16] = (byte)((df.Payload.count ) & 0xFF);
        array_data[17] = (byte)((df.Payload.count >> 8) & 0xFF);
        array_data[18] = (byte)((df.Payload.count >> 16) & 0xFF);
        array_data[19] = (byte)((df.Payload.count >> 24) & 0xFF);        
        array_data[20] = df.Payload.start_stop;
        System.arraycopy(df.Stop, 0, array_data, 21, 1);
        return array_data;
    }
    public boolean com_connect(){
        boolean retval = false;
        try {
                sh.disconnect();
                sharedData.connected = false;
                String[] ports = sh.getSerialPorts();
//                if(ports.length==0){
//                    JOptionPane.showMessageDialog(this.getFrame(), "The Train Simulator hardware was not found. \nIf the hardware is already connected, please try unplugging and replugging again!", "Re-Plug",
//                JOptionPane.WARNING_MESSAGE);
//                }
                for(int p = 0; p< ports.length;p++){
                GiveResponse("Connecting to port for the first time. Please wait...", Color.blue);
                if(sh.connect(ports[p], 9600)){
                    DataFrame df = new DataFrame();
                    df.Command = poll_port;
                    df.Payload.speed = Integer.parseInt("0");
                    df.Payload.count = Integer.parseInt("0");
                    if(SendPacketRecieveResponse(df)){
                     sharedData.connected = true;
                     retval =  true;
                     break;
                    }else{
//                        retval = false;
                    }                    
                } 
                }
                if(sharedData.connected==false){
                    JOptionPane.showMessageDialog(this.getFrame(), "The Train Simulator hardware was not found. \nIf the hardware is already connected, please try unplugging and replugging again!", "Re-Plug",
                JOptionPane.WARNING_MESSAGE);
                }
                
        } catch (IOException ex) {
            retval = false;
            sharedData.connected = false;
            GiveResponse("Port was not found or in use...", Color.red);
        }
        return retval;
    }
    
    public boolean com_disconnect(){
        boolean retval = false;
        try{
            sh.disconnect();
            sharedData.connected = false;
            retval = true;
        }
        catch(Exception ex){
            retval = false;
        }
        return retval;
    }
        private boolean serialPortWrite(byte[] data){
        boolean retval = false;
        try {
            if(sh.getSerialOutputStream() == null){
               if(com_connect()){
               sh.getSerialOutputStream().write(data);
               retval =  true;
            }
            else {
                   GiveResponse("Could not connect to the hardware", Color.RED);
                   retval = false;
               }
            }
            else{
               sh.getSerialOutputStream().write(data);
               retval =  true;
            }
        } catch (IOException ex) {
            this.com_disconnect();
            GiveResponse("Port was not found or in use...", Color.red);
            retval = false;
            //Logger.getLogger(SimpleSerialPort.class.getName()).log(Level.SEVERE, null, ex);
        }
        return retval;
    }
    private boolean SendData(DataFrame frame){
        byte[] data_to_send = getArrayFromPacket(frame);
        System.out.println("Sent: "+Arrays.toString(data_to_send));
        if(serialPortWrite(data_to_send) == false){
            return false;
        }else{
            return wait_for_resp();
        }
    }
    
        private boolean wait_for_resp(){
        boolean retval = false;
        TimerThread th = new TimerThread();
        sharedData.time_out = false;
        timeout_timer.schedule(th, 3000);
        while (sharedData.dataRecievedFlag==false && sharedData.time_out!=true){
            Thread.yield();
        }
//        if(sharedData.time_out){
//            sharedData.time_out = false;
//            sh.disconnect(); 
//            return false;
//        }
        if(sharedData.dataRecievedFlag == false){
            this.com_disconnect();
            return false;
        }
        th.cancel();
        sharedData.dataRecievedFlag = false;
        DF_recieved = sharedData.DF_recieved;
        int cmd = DF_recieved.Command[0] | DF_recieved.Command[1];
        switch(cmd){
            case 2:
            retval = true;
            break;
            case 5:
            GiveResponse("The Simulator cannot execute this command.", Color.RED);
            sharedData.sound(1000, 250, 1.0);
            retval = false;
            break;
            case 4:
            GiveResponse("The Simulator has executed the command.", Color.BLUE);
            sharedData.sound(3000, 1000, 1.0);
            retval = true;
            break;           
        }
        return retval;
    }
    public int getAutoManual(){
        int retVal = 1;
        if(rBtnAutomatic.isSelected()){
            retVal =1;
        }else{
            retVal =2;
        }
        return retVal;
    }
    
    private int getFwdReverse(){
        int retVal = 1;
        if(rBtnForward.isSelected()){
            retVal =1;
        }else{
            retVal =2;
        }
        return retVal;
    }
    public boolean SendPacketRecieveResponse(DataFrame df){
        boolean retval  = false;
        DataFrame sending_packet = df;
        sending_packet.Payload.fwd_reverse = (byte) getFwdReverse();        
        retval = SendData(df);
        return retval; 
    } 
    
    
     public void GiveResponse(final String string, final Color color) {
        Thread te = new Thread(new Runnable() {

        public void run()
        {
            lblStatus(string, color,3000);
        }
        });
        te.start();
    }
        public void lblStatus(String string,Color g,long timeOut){
        Icon ic=null;
        lblStatus.setForeground(g);//setBackground(g);
        lblStatus.setText(string);
        lblStatus.setVisible(true);
        if(g==Color.RED){
          ic=this.getResourceMap().getIcon("wrong.icon");
        }
        else if(g==Color.BLUE){
           ic= this.getResourceMap().getIcon("correct.icon");
        }        
        else{
            ic =null;
        }
        if(string.equals("")){
          ic = null;
        }
        lblStatus.setIcon(ic);
        try {
            Thread.sleep(timeOut);
        } catch (InterruptedException ex) {
        }
        if(timeOut!=0){
        lblStatus.setText("");
        lblStatus.setIcon(null);
        ClearStatusLabel();
        }
    }
    private void ClearStatusLabel(){
        lblStatus.setText("");
        lblStatus.setIcon(null);
        lblStatus.setForeground(Color.BLACK);
    }    
    private void updatePanels(){
        if(rBtnManual.isSelected()){
            SimulationPanel.removeAll();
            SimulationPanel.add(new ManualSimulator());
            SimulationPanel.validate();
        }else if(rBtnAutomatic.isSelected()){
            SimulationPanel.removeAll();
            int index = configCombo.getSelectedIndex();
            sharedData.setIndex(index);
            Counter_fwd.setVisible(false);
            counter_rev.setVisible(false);
            switch (index){
                case 1:
                SimulationPanel.setLayout(new java.awt.GridLayout(1, 2));
                simulatorPanels[0] =new SimulatorPanel(ConfigurationHeaders.Entry);
                simulatorPanels[1] = new SimulatorPanel(ConfigurationHeaders.Exit);
                SimulationPanel.add(simulatorPanels[0]);
                SimulationPanel.add(simulatorPanels[1]);
                testSchedulerPanel.setVisible(true);
                break;
                case 2:
                SimulationPanel.setLayout(new java.awt.GridLayout(1, 3));
                simulatorPanels[0] =new SimulatorPanel(ConfigurationHeaders.SSDAC_A);
                simulatorPanels[1] =new SimulatorPanel(ConfigurationHeaders.SSDAC_B);
                simulatorPanels[2] = new SimulatorPanel(ConfigurationHeaders.SSDAC_C);
                SimulationPanel.add(simulatorPanels[0]);
                SimulationPanel.add(simulatorPanels[1]);
                SimulationPanel.add(simulatorPanels[2]);
                testSchedulerPanel.setVisible(true);
                break;
                case 3:
                case 4:
                SimulationPanel.setLayout(new java.awt.GridLayout(1, 3));
                simulatorPanels[0] =new SimulatorPanel(ConfigurationHeaders.Entry);
                simulatorPanels[1] =new SimulatorPanel(ConfigurationHeaders.MidPoint);
                simulatorPanels[2] = new SimulatorPanel(ConfigurationHeaders.Exit);
                SimulationPanel.add(simulatorPanels[0]);
                SimulationPanel.add(simulatorPanels[1]);
                SimulationPanel.add(simulatorPanels[2]);
                testSchedulerPanel.setVisible(true);
                break;
                case 6:
                SimulationPanel.setLayout(new java.awt.GridLayout(1, 4));
                simulatorPanels[0] =new SimulatorPanel(ConfigurationHeaders.FwdEntry);
                simulatorPanels[1] =new SimulatorPanel(ConfigurationHeaders.RvExit);
                simulatorPanels[2] = new SimulatorPanel(ConfigurationHeaders.FwdExit);
                simulatorPanels[3] = new SimulatorPanel(ConfigurationHeaders.RvEntry);
                SimulationPanel.add(simulatorPanels[0]);
                SimulationPanel.add(simulatorPanels[1]);
                SimulationPanel.add(simulatorPanels[2]);
                SimulationPanel.add(simulatorPanels[3]);
                testSchedulerPanel.setVisible(false);
                break;
                case 5:
                SimulationPanel.setLayout(new java.awt.GridLayout(1, 4));
                simulatorPanels[0] =new SimulatorPanel(ConfigurationHeaders.SSDAC_A);
                simulatorPanels[1] =new SimulatorPanel(ConfigurationHeaders.SSDAC_B);
                simulatorPanels[2] = new SimulatorPanel(ConfigurationHeaders.SSDAC_C);
                simulatorPanels[3] = new SimulatorPanel(ConfigurationHeaders.SSDAC_D);
                SimulationPanel.add(simulatorPanels[0]);
                SimulationPanel.add(simulatorPanels[1]);
                SimulationPanel.add(simulatorPanels[2]);
                SimulationPanel.add(simulatorPanels[3]);
                testSchedulerPanel.setVisible(true);
                break;
                case 0:
                SimulationPanel.setLayout(new java.awt.GridLayout(1, 1));
                simulatorPanels[0] =new SimulatorPanel(ConfigurationHeaders.Entry);
                SimulationPanel.add(simulatorPanels[0]);
                testSchedulerPanel.setVisible(false);  
                break;
//                case 7:
//                SimulationPanel.add(new OtherConfiguration());
//                testSchedulerPanel.setVisible(false);
//                break;
            }
        }
            SimulationPanel.repaint();
            SimulationPanel.validate();
            SimulationPanel.revalidate();
    }
//    private void ShowCardinPanel(JPanel parent,String cardName){
//        CardLayout cl = (CardLayout)(parent.getLayout());
//        cl.show(parent, cardName);
//        SimulationPanel.revalidate();
//        SimulationPanel.repaint();
//    }

      public void Initialise_FWD_counter(int t){
          if(configCombo.getSelectedIndex() == 3){
              if(t ==1){
                  sharedData.setStartTime_fwd(new Date());
                  Counter_fwd.setVisible(true);   
                  jLabel6.setText("Waiting...");
              }else if(t==2){
                      Counter_fwd.setVisible(false); 
              }else if(t==3){
                      counter_rev.setVisible(false); 
              }
              else if(t==4){
                  sharedData.setStartTime_rev(new Date());
                  counter_rev.setVisible(true);
                  jLabel10.setText("Waiting...");
              }
          }    
      }  
                  

    private void initialGUISettings(){
        Image mainLogo = Toolkit.getDefaultToolkit().getImage(TrainSimulatorView.class.getResource("resources/insys_logo_w200.png"));
        getFrame().setIconImage(mainLogo);
        ButtonGroup modeGroup = new ButtonGroup();
        modeGroup.add(rBtnAutomatic);
        modeGroup.add(rBtnManual);
        counter_rev.setVisible(false);
        Counter_fwd.setVisible(false);
        ButtonGroup DirectionGroup = new ButtonGroup();
        DirectionGroup.add(rBtnForward);
        DirectionGroup.add(rBtnReverse);
        connection_indicator_panel.setBackground(Color.RED);
        
        Counter_Task_FWD = new TimerTask() {
            @Override
            public void run() {
            jLabel3.setText(sharedData.getMinSec_fwd());
            if(sharedData.get_long_MinSec_fwd()>600){
                  jLabel6.setText("System Stand by...");
            }
            }
         };    
        
         Counter_Task_REV = new TimerTask() {
            @Override
            public void run() {
            jLabel7.setText(sharedData.getMinSec_rev());
            if(sharedData.get_long_MinSec_rev()>600){
                  jLabel10.setText("System Stand by...");
            }
            }
         };   
         
        timer_fwd.scheduleAtFixedRate(Counter_Task_FWD, 0, 1000);
        timer_rev.scheduleAtFixedRate(Counter_Task_REV, 0, 1000);
        
        Blinker_Task = new TimerTask() {
            @Override
            public void run() {
             //if(sharedData.connected == false){
             //    com_connect();
             //}
             if(sharedData.connected){
                 if(connection_indicator_panel.getBackground()==Color.GREEN){
                     connection_indicator_panel.setBackground(Color.GRAY);
                 }else{
                     connection_indicator_panel.setBackground(Color.GREEN);
                 }
            }else{
                if(connection_indicator_panel.getBackground()==Color.RED){
                    connection_indicator_panel.setBackground(Color.GRAY);
                }else{
                    connection_indicator_panel.setBackground(Color.RED);
                }
            }
            }
         };
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(Blinker_Task, 0, 300);
        
         ButtonGroup intervalGroup = new ButtonGroup();
        intervalGroup.add(fixedrbtn);
        intervalGroup.add(randomrbtn);
         
        
        fixedrbtn.setSelected(true);
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton BtnStart;
    private javax.swing.JButton BtnStop;
    public javax.swing.JMenuItem CommSettingMitem;
    private javax.swing.JPanel ConfigPanel;
    private javax.swing.JPanel Counter_fwd;
    private javax.swing.JPanel DirectionPanel;
    private javax.swing.JPanel ModePanel;
    private javax.swing.JPanel SimulationPanel;
    private javax.swing.JComboBox configCombo;
    public javax.swing.JPanel connection_indicator_panel;
    private javax.swing.JPanel counter_rev;
    private javax.swing.JRadioButton fixedrbtn;
    private javax.swing.JTextField intervaltxtfield;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JRadioButton rBtnAutomatic;
    private javax.swing.JRadioButton rBtnForward;
    private javax.swing.JRadioButton rBtnManual;
    private javax.swing.JRadioButton rBtnReverse;
    private javax.swing.JRadioButton randomrbtn;
    public javax.swing.JTextField schedulercount;
    public javax.swing.JTextField schedulerspeed;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JPanel testSchedulerPanel;
    public javax.swing.JTextField trainCounts;
    // End of variables declaration//GEN-END:variables

   }
